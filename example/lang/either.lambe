type Either a b =
  data Left  { value : a }
| data Right { value : b }

impl for Either a b {
    sig fold : self -> (Left a -> c) -> (Right b -> c) -> c

    def fold  l r =
        when self {
            is Left -> l self
            is Right -> r self
        }
}

impl Monad (Either e) {
    def pure a = Right a

    def (<*>) a =
        when self {
            is Left -> Left self.value
            is Right -> a map self.value
        }

    def flatten =
        when self {
            is Left -> Left self.value
            is Right -> self.value
        }
}
