kind (->) = type -> type -> type

sig (|>) : forall a b. self -> (a -> b) -> b for a
def (|>) f = f a

sig ($) : forall a b c. self -> (a -> b) -> a -> c for b -> c
def ($) = self @

sig (@) : forall a b c. self -> (a -> b) -> a -> c for b -> c
def (@) f a = self (f a)

sig (@>) : forall a b c. self -> (b -> c) -> a -> c for a -> b
def (@>) f = f @ self

sig (::) : forall a b.(self -> a for b) -> (a -> b)
def (::) f a = a f