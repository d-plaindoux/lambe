-- section ADT definition

data None
data Some a { value : a }

type Option a = None | Some a

-- section foldable | such material can be automatically generated

trait foldable a s for s {
    sig fold : forall b. self -> (None -> b) -> (Some a -> b) -> b
}

impl forall a. foldable a None {
    def fold f _ = f self
}

impl forall a. foldable a (Some a) {
    def fold _ f = f self
}

impl forall a. foldable a (Option a)
    with foldable a None
    with foldable a (Some a)

-- section Monad

impl control

impl Monad Option {
    def pure = Some

    def product a =
        when self
        is None -> None
        is Some ->
            when a
            is None -> None
            is Some -> Some (self.value , a.value)

    def join =
        when self
        is None -> None
        is Some -> self.value
}

-- section SemiGroup and Monoid

impl forall a. SemiGroup (Option a) with SemiGroup a {
    def compose b =
        when self
        is None -> b
        is Some ->
            when b
            is None -> self
            is Some -> self.value compose b.value}

impl forall a. Monoid (Option a) {
    def neutral = None
}

