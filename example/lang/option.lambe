impl control

data None
data Some a { value : a }

type Option a = None | Some a

impl for Option a {
    sig fold : self -> (None -> b) -> (Some a -> b) -> b

    def None.fold n _ = n self
    def Some.fold _ s = s self
}

impl Monad Option {
    def pure a = Some a

    def (<*>) a =
        when self {
            is None -> None
            is Some ->  a map self.value
        }

    def flatten =
        when self {
            is None -> None
            is Some -> self.value
        }
}
