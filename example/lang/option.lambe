impl control

type Option a =
  data None
| data Some { value : a }

impl for Option a {
    sig fold : self -> (None -> b) -> (Some a -> b) -> b

    def fold s e =
        when self {
        | Some -> s self
        | None -> e self
        }
}

impl Monad Option {
    def pure a = Some a

    def <*> a =
        when self {
        | None -> None
        | Some -> a fmap self
        }

    def None.join = None
    def Some.join = self.value
}
