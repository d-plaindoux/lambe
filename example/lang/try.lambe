-- section ADT definition

data Failure { reason : string }
data Success { value  : a }

type Try a = Failure | Success a

-- section foldable | such material can be automatically generated

trait foldable a s for s {
    sig fold : forall b. self -> (string -> b) -> (a -> b) -> b
}

impl forall a. foldable a Failure {
    def fold f _ = f self.reason
}

impl forall a. foldable a (Success a) {
    def fold _ f = f self.value
}

impl forall a. foldable a (Try a)
    with foldable a Failure
    with foldable a (Success a)

-- section Monad

impl control

impl Monad Try {
    def pure = Success

    def product a =
        when self
        is Failure -> Failure self.value
        is Success ->
            when a
            is Failure -> Failure a.value
            is Success -> Success (self.value , a.value)

    def flatten =
        self fold { Failure _.reason } { _.value }
}
