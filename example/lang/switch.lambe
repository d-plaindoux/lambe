using lang.bool
using lang.eq

sig switch : a -> Switch a
def switch a = Switch a None

data Switch a b {
    value  : a;
    result : Option b
}

data Case a b {
    value  : a;
    result : (Unit -> b) -> Option b
}

data Otherwise b {
    result : (Unit -> b) -> b
}

impl forall a b. Switch a b {
    sig case : self -> Predicate a -> Case a b
    def case p = Case self.value $
                    self.result select
                        { p self.value fold { Some $ $1 () } { None } }
                        { self.result }

    sig otherwise : self -> Otherwise a b
    def otherwise = Otherwise self.result
}

impl forall a b. Case a b {
    sig (=>) : self -> (Unit -> b) -> Switch a b
    def (=>) f = SwitchCase self.value $ self.result f
}

impl forall b. Otherwise b {
    sig (=>) : (Unit -> b) -> b
    def (=>) f = self.result () fold { f () } id
}