data Nil
data Cons a {
    head : a
    tail : List a
}
type List a = Nil | Cons a

impl for List a {
    sig fold : (Nil -> b) -> (Cons a -> b) -> b

    def Nil.fold f _ = f self
    def Cons.fold _ f = f self
}

sig (::) : self -> List a -> List a for a
def (::) l = Cons self l
