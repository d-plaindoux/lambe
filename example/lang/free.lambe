/**
 * Ref http://comonad.com/reader/2011/free-monads-for-less/
 */

type Free (f:type -> type) a =
  data Return   { value: a }
| data FlatMap i {
    value: i
    cont: i -> Free f a
  }

impl for Free f {
    sig flatMap : self -> (a -> b) -> Free f b
    def Return.flatMap f = Return $ f self.value
    def FlatMap.flatMap f = FlatMap self.value { self.cont $1 flatMap f }

    sig liftF : f a -> Free f a
    def liftF a = FlatMap a Return
}



