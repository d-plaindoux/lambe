/**
 * Ref http://comonad.com/reader/2011/free-monads-for-less/
 */

type Free (f:type -> type) a =
  data Pure { value: a }
| data Roll { value: f (Free f a) }

impl Functor (Free f) {
    def Pure.fmap f = Pure $ f self.value
    def Roll.fmap f = Roll $ self.value fmap { $1 fmap f }
}



