/**
 * Ref http://comonad.com/reader/2011/free-monads-for-less/
 * Ref http://okmij.org/ftp/Computation/free-monad.html
 */

// To be reviewed

type Free (f:type -> type) a =
  data Pure { value: a }
| data Bind { value : f (Free a) }

impl forall f. Free f with Functor f {
    sig (>>=) : self -> (a -> b) -> Free f b

    def (>>=) f =
        when self {
            is Return  -> f self.value
            is FlatMap -> Bind ((>>= f) map self.value)
        }

    sig lift : f a -> Free f a
    def lift a = Bind @ map Pure
}



