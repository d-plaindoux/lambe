data Pure a { value:a }
data Roll (f:type -> type) a { value: f (Free f a) }
type Free (f:type -> type) a = Pure a | Roll f a

impl Functor (Free f) {
    // Free f : type -> type
    // fmap   : self -> (a -> b) -> (Free f) b for (Free f) a
    def Pure.fmap f = Pure $ f self.value
    def Roll.fmap f = Roll $ self.value fmap { $1 fmap f }
}
