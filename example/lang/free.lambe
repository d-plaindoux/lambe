/**
 * Ref http://comonad.com/reader/2011/free-monads-for-less/
 * Ref http://okmij.org/ftp/Computation/free-monad.html
 */

// To be reviewed

data Pure a { value: a }
data Bind (f:type -> type) a { value : f (Free a) }
type Free (f:type -> type) a = Pure a | Bind f a

impl forall f. Free f with Functor f {
    sig (>>=) : self -> (a -> b) -> Free f b
    def (>>=) f =
        when self
        is Return  -> f self.value
        is FlatMap -> Bind ((>>= f) map self.value)

    sig lift : f a -> Free f a
    def lift a = Bind @ map Pure
}



