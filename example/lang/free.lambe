/**
 * Ref http://comonad.com/reader/2011/free-monads-for-less/
 */

type Free (f:type -> type) a =
  data Pure   { value: a }
| data Roll i { value: i cont : i -> Free f a }

impl for Free f {
    sig bind : self -> (a -> b) -> Free f b
    def Pure.bind f = Pure $ f self.value
    def Roll.bind f = Roll self.value { self.cont $1 bind f }

    sig liftF : f a -> Free f a
    def liftF a = Roll a Pure
}



