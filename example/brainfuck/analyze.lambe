impl lang.product
impl program

data Pure
data Impure
type Purity = Pure | Impure

impl for Purity {
    sig fold : forall a. (Pure -> a) -> (Impure -> a) -> a

    def fold p i =
        when self {
            is Pure   -> p self
            is Impure -> i self
        }
}

type Parsed = Program * Purity

trait Analyse for Program {
    sig optimise : self -> self
    sig purity   : self -> Purity
}
