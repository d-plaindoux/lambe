impl lang.char
impl lang.exception
impl lang.list
impl lang.string
impl lang.switch

impl ast

data BraceMismatch
data UnknownChar { c:char }
type ParseError = BraceMismatch | StackUnderFlow | UnknownChar char

trait Parse {
    sig parse : self -> Program with Exception ParseError
    sig parseChar : self -> ParseContext -> ParseContext for Char with Error ParseError

    def parseChar context =
        let program  = context first in
        let programs = context second in
        switch char
        case (is '>') => { Cursor +1 :: program , programs }
        case (is '<') => { Cursor -1 :: program , programs }
        case (is '+') => { Memory +1 :: program , programs }
        case (is '-') => { Memory -1 :: program , programs }
        case (is '.') => { Input     :: program , programs }
        case (is ',') => { Output    :: program , programs }
        case (is '[') => { List empty           , $ programs push program }
        case (is ']') => { programs peek fold
                                { BraceMismatch raise }
                                { Loop program :: $1.value , $ programs pop }
                         }
        otherwise => UnknownChar char raise
}

impl Parser for String {
    type ParseContext = Pair Program (Stack Program)

    def parse =
        let parse i context =
            self chatAt i
            fold { context second peek
                   fold { context first }
                        { BraceMismatch raise }
                 }
                 { self parse (i++) $ $1 value parseChar context }
        in parse 0 (Nil , $ Stack new) // TODO - review this ugly code

}
