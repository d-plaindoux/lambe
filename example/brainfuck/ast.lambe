impl lang.int
impl lang.list
impl lang.pair

data Memory { alter:int }
data Cursor { offset:int }
data Input
data Output
data Loop   { program : Program }
data Nullify
type Token = Memory | Cursor | Input | Output | Loop | Nullify
type Program = List Token

impl for Token {
    // o_O - Lake of pattern matching!
    sig fold : (Memory -> b) -> (Cursor -> b) ->
               (Input -> b)  -> (Output -> b) ->
               (Loop -> b)   -> (Nullify -> b) -> b

    def Memory.fold  f _ _ _ _ _ = f self
    def Cursor.fold  _ f _ _ _ _ = f self
    def Input.fold   _ _ f _ _ _ = f self
    def Output.fold  _ _ _ f _ _ = f self
    def Loop.fold    _ _ _ _ f _ = f self
    def Nullify.fold _ _ _ _ _ f = f self
}


data Pure
data Impure
type Purity = Pure | Impure

impl for Purity {
    sig fold : (Pure -> b) -> (Impure -> b) -> b

    def Pure.fold f _ = f self
    def Impure.fold _ f = f self
}

type Parsed = Pair Program Purity
