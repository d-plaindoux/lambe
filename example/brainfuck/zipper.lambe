using lang.list

data Zipper a {
    left : List a;
    right : List a;
    default : a
}

trait zipper a {
    sig new        : a -> self
    sig left       : self -> self
    sig right      : self -> self
    sig current    : self -> a
    sig replace    : self -> (a -> a) -> self
    sig replace_by : self -> a -> self

    def replace_by a = self replace { a }
}

impl forall a. zipper a for Zipper a {
    impl lang.product

    def new default =
        Zipper l l default
        where l = List[default]

    def left =
        self with left = pair._1 with right = pair._2
        where pair =
            when let l = self left
            is Nil  -> List[self.default] , (self.default :: self.right)
            is Cons -> l.tail , (l.head :: self.right)

    def right =
        self with left = pair._1 with right = pair._2
        where pair =
            when let r = self right
            is Nil  -> self.default :: self.left , $ List[self.default]
            is Cons -> r.head :: self.left , $ r.tail

    def current = self left fold { self default } { $1 head }

    def replace f =
        self with left = value
        where value =
            when let l = self left
            is Nil  -> List[ (f self.default) ]
            is Cons -> f l.head :: l.tail
}
