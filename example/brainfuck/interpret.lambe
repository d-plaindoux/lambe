impl memory
impl program

trait Interpret {
    sig interpret : self -> Memory -> Memory
}

impl Interpret for Program {
    def interpret memory =
        let step : Token -> Memory -> Memory = token memory ->
            case token
            of Memory  -> memory memory token.alter
            of Cursor  -> memory cursor token.offset
            of Input   -> memory input
            of Output  -> memory output
            of Loop    -> if (memory needJump)
                          then { memory }
                          else { step token $ token program interpret memory }
            of Nullify -> memory nullify
        in
        self fold { memory } { program tail interpret $ step program.head memory }
}
