impl lang.selection
impl memory
impl program

trait Interpret {
    sig interpret : self -> Memory -> Memory
}

impl Interpret for Program {
    def interpret memory =
        let step token memory =
            when token
            is Memory  -> memory memory token.alter
            is Cursor  -> memory cursor token.isfset
            is Input   -> memory input
            is Output  -> memory output
            is Loop    -> if (memory needJump)
                          then { memory }
                          else { step token $ token program interpret memory }
            is Nullify -> memory nullify
        in
        when self
        is Nil  -> memory
        is Cons -> self.tail interpret $ step self.head memory
}
