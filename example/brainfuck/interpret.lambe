impl lang.selection
impl memory
impl program

trait Interpret {
    sig interpret : self -> Memory -> Memory
}

impl Interpret for Program {
    def interpret memory =
        let step token memory =
            when token {
            | Memory  -> memory memory token.alter
            | Cursor  -> memory cursor token.|fset
            | Input   -> memory input
            | Output  -> memory output
            | Loop    -> if (memory needJump)
                          then { memory }
                          else { step token $ token program interpret memory }
            | Nullify -> memory nullify
            }
        in
        when self {
        | Nil  -> memory
        | Cons -> self.tail interpret $ step self.head memory
        }
}
