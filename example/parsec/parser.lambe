-{
    Work in progress
}

impl lang.bool
impl lang.char
impl lang.selection
impl lang.string

impl response
impl reader

trait Parse a {
    sig parse : forall s. self -> Source s -> Response a (Source s) with Reader s
}

-- section Any

data Any

impl Parser a for Any {
    def parse s =
        let p = s next
        in when let r = p.fst
           is None -> Rejected false
           is Some -> Accepted r.value p.snd true
}

-- section Satisfy

data Satisfy a { parser: Parser a ; predicate : a -> bool }

impl Satisfy char {
    sig aChar : self -> char -> Satisfy char for Parser char
    def aChar c = Satisfy self { c == _ }

    sig notChar : self -> char -> Satisfy char for Parser char
    def notChar c = Satisfy self { c != _ }
}

impl forall a.Parser a for Satisfy a {
    def parse s =
        in when let r = self parser parse s
           is Rejected -> Rejected false
           is Accepted ->
              if (self.predicate r)
              then { Accepted r.value p.snd true }
              else { Rejected false }
}

-- section And

data And a b { left: Parser a; right: Parser b }

impl forall a b. Parser (a * b) for And a b {
    def parse s =
        when let r = self left parse s
        is Rejected -> Rejected r.consumed
        is Accepted ->
            when let l = self right parse r.stream
            is Rejected -> Rejected r.stream (r.consumed || l.consumed)
            is Accepted -> Accepted (r.value,l.value) b.stream (r.consumed || l.consumed)
}

-- section Or

data Or a { left: Parser a; right: Parser a }

impl forall a. Parser a for Or a {
    def parse s =
        when let r = self left parse s
        is Rejected ->
            if r.consumed
            then { r }
            else { self right parse s }
        is Accepted -> r
}

-- section Map

data Map a b { parser: Parser a ; function: a -> b }

impl forall a b. Parser b for Map a b {
    def parse s =
        when let r = self left.parser parse s
        is Rejected -> Rejected r.stream r.consumed
        is Accepted -> Accepted (self.function r) r.stream r.consumed
}

