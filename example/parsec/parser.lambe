impl lang.bool
impl lang.char
impl lang.selection
impl lang.string

impl response
impl stream

//
// Parser definition
//

trait Parse a {
    sig parse : forall s. self -> Stream s -> Response a s
}

//
// Predicate based parsers
//

data Satisfy s {
    predicate : s -> bool
}

impl Parser s for Satisfy s {
    def parse s =
        let p = s next
        in when let r = p._1 {
           is Rejected -> Rejected false
           is Accepted ->
              if (self predicate r)
              then { Accepted r.value p._2 true }
              else { Rejected false }
           }
}

def any : Satisfy
def any = Satisfy { true }

def aChar : char -> Satisfy
def aChar c = Satisfy { c == $1 }

def notChar : char -> Satisfy
def notChar c = Satisfy { c != $1 }

//
// Parser sequence
//

data And a b {
    left  : Parser a
    right : Parser b
}

impl Parser (Pair a b) for And a b {
    def parse s =
        when let r = self left parse s {
        is Rejected -> Rejected r.consumed
        is Accepted ->
            when let l = self right parse r.stream {
                is Rejected -> Rejected r.stream (r.consumed || l.consumed)
                is Accepted -> Accepted (r.value,l.value) b.stream (r.consumed || l.consumed)
            }
        }
}

//
// Parser choice
//

data Or a {
    left  : Parser a
    right : Parser a
}

impl Parser a for Or a {
    def parse s =
        when let r = self left parse s {
        is Rejected ->
              if r.consumed
              then { r }
              else { self right parse s }
        is Accepted -> r
        }
}

//
// Parser map
//

data FMap a b {
    parser : Parser a
    function : a -> b
}

impl Parser b for FMap a b {
    def parse s =
        when let r = self left.parser parse s {
            is Rejected -> Rejected r.stream r.consumed
            is Accepted -> Accepted (self.function r) r.stream r.consumed
        }
}

