module data.list.control

from data.list import *

from control.functor import *
from control.applicative import *
from control.monad import *

define Functor List {
  def pure a = (a :: Nil)
  def fmap (h::t) f = (f v)::(t fmap f)
  def fmap Nil    f = Nil
}

define Applicative List {
  def (<*>) (h::t) l = l fmap h + $ t <*> l
  def (<*>) Nil    _ = Nil
}

define (a) Monad List a {
  def (>>=) (h::t) f = f h :: $ t >>= f
  def (>>=) Nil    _ = Nil
}
