module Option

from Control import *

data Option : type -> type
data (a:type) None : Option a
data (a:type) Some : a -> Option a

define (a:type) Functor Option a {
  def self(None)   map _ = None
  def self(Some v) map f = Some (f v)
}

define (a:type) Applicative Option a {
  def (<*>) None     = None
  def (<*>) (Some f) = self map f
}

define (a:type) Monad Option a {
  def self(None)   (>>=) _ = None
  def self(Some v) (>>=) f = f v
}