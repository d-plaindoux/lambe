module control.function

trait Function {
    def (.)  : [a,b,c] (b -> c) -> (a -> b) -> c
    def (|>) : [a,b,c] (a -> b) -> (b -> c) -> c
    def flip : [a,b,c] (a -> b -> c) -> (b -> a -> c)
    def identity : [a] a -> a
}

define Function {
    def flip f = b a -> f a b
    def (.) f g = x -> f $ g x
    def (|>) = flip (.)
    def identity a = a
}