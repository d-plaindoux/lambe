module control.control

trait Functor (m:type->type)(a) for m a {
  def (a)(b) map : (a -> b) -> m b
}

trait Applicative (m:type->type)(a) for m a {
  def (b) (<*>) : m (a -> b) -> m b
  def lift2 : (a -> b -> c ) -> m b -> m c
  def (b) (*>) : m b -> m b
  def (b) (<*) : m b -> m a
}

trait Monad (m:type->type)(a) for m a {
  def (b) (>>=) : (a -> m b) -> m b
}

define (m:type->type)(a) Applicative m a with Functor m a {
  def lift2 f b = b <*> (self map f)
}

define (m:type->type)(a) Applicative m a with Monad m a {
  def (*>) b = self >>= (_ -> b)
  def (<*) b = b >>= (_ -> self)
}

