module control.profunctor

// See https://bartoszmilewski.com/2018/02/20/free-monoidal-profunctors/

typealias type1 = type -> type
typealias type2 = type -> type1

trait Profunctor (m:type2) {
  def pure  : [a,b] a -> b -> m a b
  def dimap : [a,b,s,t] (a -> s) -> (b -> t) -> m a b ->  m s t
}

typealias (::~>) = [a,b] (p:type2) -> (q:type2) -> p a b -> q a b

trait HPFunctor (pp:type2->type) {
  def hpmap  : [p:type2,q:type2] (p ::~> q) -> (pp p ::~> pp q)
  def ddimap : [p:type2,q:type2,a,b] (s -> a) -> (b -> t) -> pp p a b -> pp p s t
}
