module control.applicative

from control.functor import *
from control.monad import *

trait Applicative (m:type->type) with Functor m {
  def (<*>) : m (a -> b) -> m a -> m b
  def (<$>) : (a -> b) -> m a -> m b

  def lift2 : (a -> b -> c ) -> m a -> m b -> m c

  def (*>)  : m a -> m b -> m b
  def (<*)  : m a -> m b -> m a
}

define (m:type->type) Applicative m {
  def lift2 f a = a fmap f <*>
  def <$> f a = a fmap f
}

define (m:type->type) Applicative m with Monad m {
  def (*>) a b = a >>= (_ -> b)
  def (<*) a b = b >>= (_ -> a)
}
