module lang.data.string

from lang.core.comparable import (Equatable)
from lang.core.numerical import (Adder)

data String : type

define Equatable String {
    def (==) i j = native 2 "String.equals" i j
}

define Adder Stringify String String {
    def (+) i j = native 2 "String.concat" (i toString) j
}

define Adder String Stringify String {
    def (+) i j = native 2 "String.concat" i (j toString)
}

// What about String -> String -> String?
// Priority based on left to right pattern selection
// Mainly because partial functions can be used!