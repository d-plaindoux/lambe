use lang.bool
use lang.char
use lang.int
use lang.product
use lang.string

use zipper

type Memory = Zipper (int * string)

impl Memory with Reader char{
    sig new      : self
    sig cursor   : self -> int -> self
    sig memory   : self -> int -> self
    sig nullify  : self -> self
    sig input    : self -> self
    sig output   : self -> self
    sig needJump : self -> Bool

    def new = zipper new 0 , ""

    def cursor offset =
        let move =
            if (offset > 0)
            then Zipper.right
            else Zipper.left
        in let loop mem offset =
            if (offset = 0)
            then { acc, self.second }
            else { loop (mem move) (offset --) }
        in loop self.first (offset abs)

    def memory value =
        (self fist replace $ value +) , (self.second)

    def nullify =
        (self first replace_by 0) , self.second

    def input =
        (self first replace_by $ char read toInt) , self.second

    def output =
        (self first, self second + $ self first current toChar )

    def needJump = self current == 0
}
