use lang.char
use lang.exception
use lang.list
use lang.string
use lang.switch
use lang.predicate

use ast

data BraceMismatch
data StackUnderFlow
data UnknownChar (c:char)
type ParseError = BraceMismatch | StackUnderFlow | UnknownChar

trait Parse with Error ParseError {

    sig parse : self -> Program

    type ParseContext = Pair Program (Stack Program)

    sig parseChar : self -> ParseContext -> ParseContext for char
    def parseChar context =
        let program  = context first
        in let programs = context second
        in switch self
            case '>' => { Cursor +1 :: program , programs }
            case '<' => { Cursor -1 :: program , programs }
            case '+' => { Memory +1 :: program , programs }
            case '-' => { Memory -1 :: program , programs }
            case '.' => { Input     :: program , programs }
            case ',' => { Output    :: program , programs }
            case '[' => { List empty , $ programs push program }
            case ']' => { programs peek fold
                           { BraceMismatch raise }
                           { Loop program :: $1.value , $ programs pop }
                        }
            otherwise => UnknownChar self raise
}

impl Parser for string {
    def parse =
        let parse i context =
            self chatAt i
            fold { context second peek
                   fold { context first }
                        { BraceMismatch raise }
                 }
                 { self parse (i++) $ $1 value parseChar context }
        in parse 0 $ Nil , $ Stack new

}
